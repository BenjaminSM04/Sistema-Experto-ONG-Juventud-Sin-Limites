@page "/"
@using Microsoft.AspNetCore.Identity
@using Sistema_Experto_ONG_Juventud_Sin_Limites.Domain.Security
@using Microsoft.EntityFrameworkCore
@using Sistema_Experto_ONG_Juventud_Sin_Limites.Data

@inject UserManager<Usuario> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation

<PageTitle>Inicio - ONG Juventud Sin Límites</PageTitle>

<AuthorizeView>
<Authorized>
        <div class="container-fluid">
   <div class="row mt-4">
                <div class="col-12">
    <div class="card shadow-sm">
   <div class="card-body">
       <h1 class="display-4">
      <i class="fas fa-home me-3"></i>¡Bienvenido(a), @nombreCompleto!
        </h1>
   <p class="lead text-muted">Sistema Experto - ONG Juventud Sin Límites</p>
      <hr class="my-4" />
     
     @if (usuario != null)
 {
     <div class="row">
      <div class="col-md-6">
        <div class="card border-primary mb-3">
       <div class="card-header bg-primary text-white">
  <h5 class="mb-0"><i class="fas fa-user me-2"></i>Información Personal</h5>
      </div>
      <div class="card-body">
               <dl class="row mb-0">
      <dt class="col-sm-4">Nombre Completo:</dt>
   <dd class="col-sm-8">@nombreCompleto</dd>
               
    <dt class="col-sm-4">Email:</dt>
     <dd class="col-sm-8">@usuario.Email</dd>
  
     @if (persona != null)
  {
            @if (persona.Telefono != null)
{
      <dt class="col-sm-4">Teléfono:</dt>
    <dd class="col-sm-8">@persona.Telefono</dd>
      }
      
     @if (persona.FechaNacimiento.HasValue)
  {
        <dt class="col-sm-4">Fecha de Nacimiento:</dt>
  <dd class="col-sm-8">@persona.FechaNacimiento.Value.ToString("dd/MM/yyyy")</dd>
      
       <dt class="col-sm-4">Edad:</dt>
        <dd class="col-sm-8">@CalcularEdad(persona.FechaNacimiento.Value) años</dd>
      }
       }
        </dl>
   </div>
      </div>
</div>
  
     <div class="col-md-6">
       <div class="card border-success mb-3">
     <div class="card-header bg-success text-white">
      <h5 class="mb-0"><i class="fas fa-shield-alt me-2"></i>Información de Cuenta</h5>
  </div>
        <div class="card-body">
       <dl class="row mb-0">
  <dt class="col-sm-4">Rol(es):</dt>
    <dd class="col-sm-8">
  @if (roles != null && roles.Any())
        {
      <span class="badge bg-primary me-1">@string.Join(", ", roles)</span>
      }
        else
     {
 <span class="text-muted">Sin roles asignados</span>
    }
   </dd>
  
    <dt class="col-sm-4">Estado:</dt>
    <dd class="col-sm-8">
       <span class="badge bg-success">@usuario.Estado</span>
    </dd>
        
  <dt class="col-sm-4">Email Confirmado:</dt>
       <dd class="col-sm-8">
        @if (usuario.EmailConfirmed)
 {
    <i class="fas fa-check-circle text-success"></i> <span class="text-success">Sí</span>
    }
  else
   {
    <i class="fas fa-times-circle text-danger"></i> <span class="text-danger">No</span>
        }
       </dd>
    
        <dt class="col-sm-4">Cuenta Creada:</dt>
      <dd class="col-sm-8">@usuario.CreadoEn.ToString("dd/MM/yyyy HH:mm")</dd>
           
      @if (programas != null && programas.Any())
  {
      <dt class="col-sm-4">Programas:</dt>
 <dd class="col-sm-8">
   @foreach (var programa in programas)
    {
   <span class="badge bg-info me-1">@programa.Nombre</span>
          }
        </dd>
        }
         </dl>
       </div>
       </div>
      </div>
       </div>
  
     <div class="row mt-4">
     <div class="col-12">
         <div class="card border-info">
       <div class="card-header bg-info text-white">
   <h5 class="mb-0"><i class="fas fa-rocket me-2"></i>Acceso Rápido</h5>
  </div>
    <div class="card-body">
    <div class="row">
      @if (context != null && context.User.IsInRole("Administrador") || (context != null && context.User.IsInRole("Coordinador")))
      {
     <div class="col-md-3 mb-3">
     <a href="/Admin/Motor" class="btn btn-primary btn-lg w-100">
      <i class="fas fa-cogs d-block fs-1 mb-2"></i>
      Motor de Inferencia
  </a>
   </div>
     }
    
           <div class="col-md-3 mb-3">
         <a href="/Account/Manage" class="btn btn-secondary btn-lg w-100">
   <i class="fas fa-user-cog d-block fs-1 mb-2"></i>
      Mi Perfil
         </a>
      </div>
          
  @if (context != null && context.User.IsInRole("Administrador"))
   {
     <div class="col-md-3 mb-3">
  <a href="/Admin/Usuarios" class="btn btn-warning btn-lg w-100">
       <i class="fas fa-users d-block fs-1 mb-2"></i>
   Gestión de Usuarios
    </a>
   </div>
    }
     
      <div class="col-md-3 mb-3">
   <a href="/Account/Logout" class="btn btn-danger btn-lg w-100">
        <i class="fas fa-sign-out-alt d-block fs-1 mb-2"></i>
      Cerrar Sesión
     </a>
       </div>
      </div>
       </div>
   </div>
      </div>
    </div>
   }
     else
{
       <div class="alert alert-warning">
        <i class="fas fa-exclamation-triangle me-2"></i>
       No se pudo cargar la información del usuario.
        </div>
       }
       </div>
       </div>
     </div>
   </div>
     </div>
    </Authorized>
    <NotAuthorized>
  <div class="container">
 <div class="row justify-content-center mt-5">
  <div class="col-md-6">
    <div class="card shadow">
   <div class="card-body text-center">
     <i class="fas fa-lock fs-1 text-muted mb-3"></i>
        <h3>Acceso Restringido</h3>
 <p class="text-muted">Debes iniciar sesión para acceder a esta página.</p>
  <a href="/Account/Login" class="btn btn-primary btn-lg">
   <i class="fas fa-sign-in-alt me-2"></i>Iniciar Sesión
       </a>
   </div>
       </div>
    </div>
  </div>
   </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private HttpContext? context { get; set; }
  
    private Usuario? usuario;
    private Persona? persona;
    private string nombreCompleto = "Usuario";
    private List<string>? roles;
    private List<Domain.Programas.Programa>? programas;

    protected override async Task OnInitializedAsync()
    {
  var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
     var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
{
  usuario = await UserManager.GetUserAsync(user);
        
    if (usuario != null)
  {
    // Cargar persona
  persona = await DbContext.Personas
          .Where(p => p.PersonaId == usuario.PersonaId && !p.IsDeleted)
               .FirstOrDefaultAsync();
   
     if (persona != null)
    {
     nombreCompleto = $"{persona.Nombres} {persona.Apellidos}";
     }
       
            // Cargar roles
     roles = (await UserManager.GetRolesAsync(usuario)).ToList();
 
        // Cargar programas asignados
          programas = await DbContext.UsuarioProgramas
        .Where(up => up.UsuarioId == usuario.Id && !up.IsDeleted)
         .Include(up => up.Programa)
        .Select(up => up.Programa)
         .ToListAsync();
     }
        }
    }
    
 private int CalcularEdad(DateTime fechaNacimiento)
    {
    var hoy = DateTime.Today;
        var edad = hoy.Year - fechaNacimiento.Year;
   if (fechaNacimiento.Date > hoy.AddYears(-edad)) edad--;
        return edad;
    }
}
