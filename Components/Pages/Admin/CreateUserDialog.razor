@using Microsoft.AspNetCore.Components.Web
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using MudBlazor
@inject ILogger<CreateUserDialog> Logger

<MudDialog>
    <TitleContent>
     <MudText Typo="Typo.h6">
    <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Class="mr-2" />
            Crear Nuevo Usuario
      </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@model" OnValidSubmit="HandleValidSubmit" id="createUserForm">
     <DataAnnotationsValidator />
     <ValidationSummary />
   
        <MudTextField @bind-Value="model.Email" 
 Label="Email" 
    Required="true" 
    RequiredError="El email es requerido"
          Variant="Variant.Outlined"
     HelperText="Debe ser un email corporativo o institucional válido"
    Validation="@(new Func<string, string>(ValidateEmail))" />
   
        <MudTextField @bind-Value="model.Nombres" 
           Label="Nombres" 
        Required="true" 
  RequiredError="Los nombres son requeridos"
        Variant="Variant.Outlined" 
    Class="mt-3" />
      
  <MudTextField @bind-Value="model.Apellidos" 
        Label="Apellidos" 
Required="true" 
        RequiredError="Los apellidos son requeridos"
      Variant="Variant.Outlined" 
     Class="mt-3" />
 
       <MudTextField @bind-Value="model.Telefono" 
   Label="Teléfono (Opcional)" 
      Variant="Variant.Outlined" 
        Class="mt-3"
      HelperText="Formato: +505 8888-8888" />
   
            <MudSelect @bind-Value="model.Rol" 
                Label="Rol" 
 Required="true" 
             RequiredError="El rol es requerido"
            Variant="Variant.Outlined" 
    Class="mt-3">
     @foreach (var rol in Roles)
    {
         <MudSelectItem Value="@rol">@rol</MudSelectItem>
                }
            </MudSelect>

         <MudAlert Severity="Severity.Info" Class="mt-3" Icon="@Icons.Material.Filled.Info">
      Se generará una contraseña temporal segura automáticamente. El usuario deberá cambiarla en su primer inicio de sesión.
            </MudAlert>
        </EditForm>
    </DialogContent>
    <DialogActions>
  <MudButton OnClick="Cancel" Variant="Variant.Outlined">
            Cancelar
        </MudButton>
        <MudButton OnClick="Submit" Color="Color.Primary" Variant="Variant.Filled">
        Crear Usuario
   </MudButton>
    </DialogActions>
</MudDialog>

@code {
  [CascadingParameter]
    private IDialogReference? MudDialog { get; set; }

    [Parameter]
    public List<string> Roles { get; set; } = new();

  private CreateUserModel model = new();
    private bool _isSubmitting = false;

    protected override void OnInitialized()
 {
        Logger.LogInformation("✅ CreateUserDialog inicializado");
        Logger.LogInformation("📋 Roles disponibles: {Count}", Roles?.Count ?? 0);
        Logger.LogInformation("🔍 MudDialog es null: {IsNull}", MudDialog == null);
    }

    private string? ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
  return "El email es requerido";

        // Validar formato básico de email
        var emailRegex = new Regex(@"^[^@\s]+@[^@\s]+\.[^@\s]+$");
 if (!emailRegex.IsMatch(email))
     return "Formato de email inválido";

        // Validar que no sea un email de prueba o genérico
   var invalidPatterns = new[]
{
            @"^[a-z]@[a-z]\.(com|net|org)$", // a@a.com, b@c.net
@"^test@", // test@...
            @"^prueba@", // prueba@...
       @"^demo@", // demo@...
       @"@test\.", // ...@test.com
   @"@ejemplo\.", // ...@ejemplo.com
            @"@example\." // ...@example.com
        };

        foreach (var pattern in invalidPatterns)
        {
       if (Regex.IsMatch(email.ToLower(), pattern))
   return "Email no válido. Use un email corporativo o institucional real";
    }

        // Validar dominios de un solo carácter
        var parts = email.Split('@');
        if (parts.Length == 2)
        {
       var domainParts = parts[1].Split('.');
            if (domainParts.Any(p => p.Length < 2))
  return "Dominio de email inválido";
  }

        // Validar longitud mínima del usuario (antes del @)
  if (parts[0].Length < 3)
            return "El nombre de usuario debe tener al menos 3 caracteres";

        return null; // Email válido
    }

    private void HandleValidSubmit()
    {
   Logger.LogInformation("✅ HandleValidSubmit llamado");
   Logger.LogInformation("📧 Email: {Email}, Nombres: {Nombres}, Rol: {Rol}", model.Email, model.Nombres, model.Rol);
  
        // Cerrar el diálogo con el modelo
        MudDialog?.Close(DialogResult.Ok(model));
    }

    private void Submit()
    {
   Logger.LogInformation("✅ Submit (botón) llamado");
      
     if (_isSubmitting)
            return;

        // Validar manualmente el formulario
        var emailValidation = ValidateEmail(model.Email);
        if (!string.IsNullOrEmpty(emailValidation))
     {
            Logger.LogWarning("❌ Validación de email falló: {Message}", emailValidation);
        return;
    }

    if (string.IsNullOrWhiteSpace(model.Nombres) || 
     string.IsNullOrWhiteSpace(model.Apellidos) || 
    string.IsNullOrWhiteSpace(model.Rol))
   {
         Logger.LogWarning("❌ Faltan campos requeridos");
            return;
    }

        _isSubmitting = true;
  Logger.LogInformation("📧 Email: {Email}, Nombres: {Nombres}, Rol: {Rol}", model.Email, model.Nombres, model.Rol);
      
        // Cerrar el diálogo con el modelo
        MudDialog?.Close(DialogResult.Ok(model));
    }

    private void Cancel()
    {
        Logger.LogInformation("❌ Cancel llamado");
        MudDialog?.Close(DialogResult.Cancel());
    }

    public class CreateUserModel
    {
        [Required(ErrorMessage = "El email es requerido")]
  [EmailAddress(ErrorMessage = "Email inválido")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Los nombres son requeridos")]
   [StringLength(100, ErrorMessage = "Máximo 100 caracteres")]
  public string Nombres { get; set; } = "";

        [Required(ErrorMessage = "Los apellidos son requeridos")]
        [StringLength(100, ErrorMessage = "Máximo 100 caracteres")]
        public string Apellidos { get; set; } = "";

        [StringLength(30, ErrorMessage = "Máximo 30 caracteres")]
   public string? Telefono { get; set; }

        [Required(ErrorMessage = "El rol es requerido")]
  public string Rol { get; set; } = "";
    }
}
