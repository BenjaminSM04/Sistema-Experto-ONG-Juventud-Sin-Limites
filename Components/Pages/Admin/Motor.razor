@page "/admin/motor"
@rendermode InteractiveServer
@using Sistema_Experto_ONG_Juventud_Sin_Limites.Api.Models
@using Sistema_Experto_ONG_Juventud_Sin_Limites.Domain.Common
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Sistema_Experto_ONG_Juventud_Sin_Limites.Infrastructure.Services.Inference
@using Sistema_Experto_ONG_Juventud_Sin_Limites.Data
@using Sistema_Experto_ONG_Juventud_Sin_Limites.Domain.Security
@using Microsoft.EntityFrameworkCore
@attribute [Authorize(Roles = "Administrador,Coordinador")]
@inject NavigationManager Navigation
@inject IMotorInferencia MotorInferencia
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Motor> Logger

<PageTitle>Motor de Inferencia</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <!-- Título -->
    <MudText Typo="Typo.h4" Class="mb-2">
        <MudIcon Icon="@Icons.Material.Filled.Psychology" Class="mr-2" />
    Motor de Inferencia
    </MudText>
 <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
     Ejecuta el motor de inferencia para detectar alertas y riesgos en los programas
  @if (_esCoordinador)
      {
            <span class="text-warning"> (Limitado a tus programas asignados)</span>
 }
    </MudText>

    <!-- Panel de Ejecución -->
    <MudCard Class="mb-4">
        <MudCardContent>
   <MudGrid>
          <MudItem xs="12" md="5">
   <MudTextField 
             Label="Fecha de Corte" 
       @bind-Value="_fechaCorteString" 
            Placeholder="dd/MM/yyyy"
   HelperText="Fecha hasta la cual se evaluarán las reglas (default: hoy)" />
   </MudItem>
       <MudItem xs="12" md="4">
 @if (_esCoordinador)
  {
     <MudSelect T="int?" 
      Label="Programa" 
         @bind-Value="_programaId"
      Clearable="true"
       Required="true"
  HelperText="Selecciona uno de tus programas asignados">
      @foreach (var programa in _programasDisponibles)
   {
       <MudSelectItem Value="@((int?)programa.Id)">@programa.Nombre</MudSelectItem>
  }
          </MudSelect>
      }
             else
    {
     <MudNumericField 
     Label="Programa ID (Opcional)" 
      @bind-Value="_programaId" 
                 Min="1"
    Clearable="true"
 HelperText="Dejar vacío para evaluar todos los programas" />
 }
     </MudItem>
         <MudItem xs="12" md="3" Class="d-flex align-end">
     <MudButton 
   Variant="Variant.Filled" 
   Color="Color.Primary" 
    StartIcon="@Icons.Material.Filled.PlayArrow" 
     OnClick="HandleEjecutarClick"
 Disabled="@_ejecutando"
         FullWidth="true">
 @if (_ejecutando)
  {
       <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
  <span>Ejecutando...</span>
     }
     else
  {
  <span>Ejecutar Ahora</span>
          }
        </MudButton>
 </MudItem>
   </MudGrid>
        </MudCardContent>
    </MudCard>

    <!-- Resumen de Ejecución -->
  @if (_resumen != null)
  {
   <MudAlert Severity="Severity.Success" Icon="@Icons.Material.Filled.CheckCircle" Class="mb-4">
 <MudText Typo="Typo.body1" Class="mb-2"><strong>Ejecución Completada</strong></MudText>
   <MudGrid>
 <MudItem xs="12" sm="4">
      <MudText Typo="Typo.body2">
      <strong>Reglas Ejecutadas:</strong> @_resumen.ReglasEjecutadas
  </MudText>
</MudItem>
       <MudItem xs="12" sm="4">
       <MudText Typo="Typo.body2">
  <strong>Alertas Generadas:</strong> @_resumen.AlertasGeneradas
    </MudText>
   </MudItem>
       <MudItem xs="12" sm="4">
                <MudText Typo="Typo.body2">
   <strong>Errores:</strong> @_resumen.Errores
    </MudText>
  </MudItem>
  </MudGrid>
    </MudAlert>
    }

    <!-- Mensaje de Error -->
  @if (!string.IsNullOrEmpty(_error))
    {
   <MudAlert Severity="Severity.Error" Icon="@Icons.Material.Filled.Error" Class="mb-4">
  <div class="d-flex align-center justify-space-between">
   <span>@_error</span>
  <MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Small" OnClick="@(() => _error = null)" />
      </div>
        </MudAlert>
    }

    <!-- Mensaje de Éxito -->
    @if (!string.IsNullOrEmpty(_successMessage))
    {
        <MudAlert Severity="Severity.Success" Icon="@Icons.Material.Filled.CheckCircle" Class="mb-4">
  <div class="d-flex align-center justify-space-between">
          <span>@_successMessage</span>
          <MudIconButton Icon="@Icons.Material.Filled.Close" Size="Size.Small" OnClick="@(() => _successMessage = null)" />
 </div>
      </MudAlert>
    }

 <!-- Tabla de Alertas -->
    <MudCard>
        <MudCardHeader>
  <CardHeaderContent>
<MudText Typo="Typo.h6">
    <MudIcon Icon="@Icons.Material.Filled.Warning" Class="mr-2" />
         Alertas Generadas (@_alertas.Count)
      </MudText>
            </CardHeaderContent>
   </MudCardHeader>
        <MudCardContent Class="pa-0">
            <MudTable 
        Items="@_alertas" 
       Dense="true" 
     Hover="true" 
     Loading="@_cargando"
                LoadingProgressColor="Color.Primary"
    Breakpoint="Breakpoint.Sm"
    Elevation="0">
     <HeaderContent>
 <MudTh>ID</MudTh>
    <MudTh>Severidad</MudTh>
       <MudTh>Mensaje</MudTh>
      <MudTh>Programa</MudTh>
 <MudTh>Actividad</MudTh>
          <MudTh>Participante</MudTh>
       <MudTh>Generada</MudTh>
     <MudTh>Estado</MudTh>
        <MudTh>Acciones</MudTh>
    </HeaderContent>
    <RowTemplate>
   <MudTd DataLabel="ID">@context.AlertaId</MudTd>
      <MudTd DataLabel="Severidad">
<MudText Typo="Typo.body2" Color="@ObtenerColorSeveridad(context.Severidad)" Style="font-weight: 600;">
   @ObtenerTextoSeveridad(context.Severidad)
      </MudText>
 </MudTd>
      <MudTd DataLabel="Mensaje">
      <MudText Typo="Typo.body2">@context.Mensaje</MudText>
  </MudTd>
       <MudTd DataLabel="Programa">
@{
 var nombrePrograma = context.ProgramaId.HasValue ? _programasDisponibles.FirstOrDefault(p => p.Id == context.ProgramaId.Value)?.Nombre ?? context.ProgramaId.Value.ToString() : "-";
}
  @nombrePrograma
      </MudTd>
     <MudTd DataLabel="Actividad">@(context.ActividadId?.ToString() ?? "-")</MudTd>
     <MudTd DataLabel="Participante">@(context.ParticipanteId?.ToString() ?? "-")</MudTd>
        <MudTd DataLabel="Generada">
         <MudText Typo="Typo.body2">
   @context.GeneradaEn.ToLocalTime().ToString("dd/MM/yyyy HH:mm")
    </MudText>
    </MudTd>
    <MudTd DataLabel="Estado">
    <MudText Typo="Typo.body2" Color="@ObtenerColorEstado(context.Estado)" Style="font-weight: 600;">
  @ObtenerTextoEstado(context.Estado)
       </MudText>
    </MudTd>
        <MudTd DataLabel="Acciones">
     @if (context.Estado == (byte)EstadoAlerta.Abierta)
       {
        <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
     <MudButton 
     StartIcon="@Icons.Material.Filled.CheckCircle" 
        Color="Color.Success" 
         Size="Size.Small"
      OnClick="@(() => CambiarEstadoAlerta(context.AlertaId, EstadoAlerta.Resuelta, context.RowVersion))">
      Resolver
     </MudButton>
    <MudButton 
 StartIcon="@Icons.Material.Filled.Cancel" 
   Color="Color.Warning" 
   Size="Size.Small"
           OnClick="@(() => CambiarEstadoAlerta(context.AlertaId, EstadoAlerta.Descartada, context.RowVersion))">
 Descartar
      </MudButton>
    </MudButtonGroup>
     }
  else
         {
<MudText Typo="Typo.caption" Color="Color.Secondary">-</MudText>
   }
   </MudTd>
   </RowTemplate>
     <NoRecordsContent>
        <MudText Class="pa-4">
  <MudIcon Icon="@Icons.Material.Filled.Info" Class="mr-2" />
     No hay alertas para mostrar. Ejecute el motor para generar alertas.
   </MudText>
   </NoRecordsContent>
       <LoadingContent>
   <MudText Class="pa-4">
 <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
       Cargando alertas...
       </MudText>
    </LoadingContent>
        </MudTable>
 </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private string _fechaCorteString = DateTime.Now.ToString("dd/MM/yyyy");
    private int? _programaId;
    private bool _ejecutando = false;
    private bool _cargando = false;
    private ResumenEjecucion? _resumen;
    private List<AlertaDto> _alertas = new();
    private string? _error;
    private string? _successMessage;
    private bool _esCoordinador = false;
    private List<ProgramaInfo> _programasDisponibles = new();
  private Usuario? _usuarioActual;

    protected override async Task OnInitializedAsync()
{
 Logger.LogInformation("🎯 Motor.razor inicializado");
   _alertas = new List<AlertaDto>();

        // Obtener usuario y programas asignados
 var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
     var user = authState.User;

  if (user?.Identity?.IsAuthenticated == true)
        {
 _esCoordinador = user.IsInRole("Coordinador");
    
        // Obtener usuario desde la BD con sus programas asignados
    _usuarioActual = await DbContext.Users
   .Include(u => u.UsuarioProgramas)
     .ThenInclude(up => up.Programa)
       .FirstOrDefaultAsync(u => u.Email == user.Identity.Name);

       if (_usuarioActual != null)
            {
         if (_esCoordinador)
       {
    // Coordinadores solo ven sus programas asignados
      _programasDisponibles = _usuarioActual.UsuarioProgramas
   .Where(up => !up.IsDeleted && !up.Programa.IsDeleted)
        .Select(up => new ProgramaInfo { Id = up.ProgramaId, Nombre = up.Programa.Nombre })
      .ToList();

      Logger.LogInformation("👤 Coordinador {Email} tiene acceso a {Count} programas", 
        _usuarioActual.Email, _programasDisponibles.Count);
         }
     else
  {
   // Administradores ven todos los programas
        _programasDisponibles = await DbContext.Programas
        .Where(p => !p.IsDeleted)
        .Select(p => new ProgramaInfo { Id = p.ProgramaId, Nombre = p.Nombre })
    .ToListAsync();
        }
    }
}
    }

    private void HandleEjecutarClick()
    {
   Logger.LogInformation("🖱️ HandleEjecutarClick llamado");
        
     // Validar que coordinadores hayan seleccionado un programa
 if (_esCoordinador && !_programaId.HasValue)
        {
      _error = "Por favor, selecciona un programa antes de ejecutar el motor.";
      return;
    }

        _ = EjecutarMotor();
}

private DateTime? ParseFecha(string fechaString)
{
  if (DateTime.TryParseExact(fechaString, "dd/MM/yyyy", null, System.Globalization.DateTimeStyles.None, out DateTime fecha))
        {
     return fecha;
        }
        return DateTime.Now;
    }

    private async Task EjecutarMotor()
    {
        Logger.LogInformation("🚀 EjecutarMotor() llamado");
        
        _ejecutando = true;
   _error = null;
        _successMessage = null;
      _resumen = null;
 _alertas.Clear();
        
        StateHasChanged();

        try
        {
  var fechaCorte = ParseFecha(_fechaCorteString);
          var fechaCorteOnly = DateOnly.FromDateTime(fechaCorte ?? DateTime.Now);

   Logger.LogInformation("📤 Ejecutando motor: FechaCorte={FechaCorte}, ProgramaId={ProgramaId}", 
    fechaCorteOnly, _programaId);
            
    // Llamada directa al servicio del motor
   var resumen = await MotorInferencia.EjecutarAsync(fechaCorteOnly, _programaId, CancellationToken.None);

  Logger.LogInformation("✅ Motor ejecutado: Reglas={Reglas}, Alertas={Alertas}, Errores={Errores}",
             resumen.ReglasEjecutadas, resumen.AlertasGeneradas, resumen.Errores);

   // Filtrar alertas según los permisos del usuario
     var queryAlertas = DbContext.Alertas.Where(a => !a.IsDeleted);

   if (_esCoordinador && _usuarioActual != null)
   {
      // Coordinadores solo ven alertas de sus programas asignados
      var programasIds = _usuarioActual.UsuarioProgramas
       .Where(up => !up.IsDeleted)
      .Select(up => up.ProgramaId)
          .ToList();

    queryAlertas = queryAlertas.Where(a => a.ProgramaId.HasValue && programasIds.Contains(a.ProgramaId.Value));
    }

     _alertas = await queryAlertas
       .OrderByDescending(a => a.AlertaId)
     .Take(50)
     .Select(a => new AlertaDto(
      a.AlertaId,
    a.Mensaje,
           (byte)a.Severidad,
   (byte)a.Estado,
   a.GeneradaEn,
   a.ReglaId,
     a.ProgramaId,
        a.ActividadId,
   a.ParticipanteId,
  a.RowVersion
      ))
       .ToListAsync();

    Logger.LogInformation("📋 Obtenidas {Count} alertas", _alertas.Count);

_resumen = new ResumenEjecucion(
       resumen.ReglasEjecutadas,
 resumen.AlertasGeneradas,
resumen.Errores
    );

     _successMessage = $"Motor ejecutado exitosamente. {_resumen.AlertasGeneradas} alertas generadas.";
      }
     catch (Exception ex)
        {
  _error = $"Error inesperado: {ex.Message}";
       Logger.LogError(ex, "❌ Error ejecutando motor");
        }
        finally
        {
     _ejecutando = false;
      StateHasChanged();
        }
    }

    private async Task CambiarEstadoAlerta(int alertaId, EstadoAlerta nuevoEstado, byte[] rowVersion)
  {
  Logger.LogInformation("🔄 Cambiando estado de alerta {AlertaId} a {Estado}", alertaId, nuevoEstado);

   try
     {
     var alerta = await DbContext.Alertas
     .Where(a => a.AlertaId == alertaId && !a.IsDeleted)
   .FirstOrDefaultAsync();

 if (alerta == null)
  {
      Logger.LogWarning("❌ Alerta {AlertaId} no encontrada", alertaId);
     _error = "Alerta no encontrada.";
     _alertas.RemoveAll(a => a.AlertaId == alertaId);
   StateHasChanged();
         return;
   }

          // Manejo de concurrencia optimista
     if (rowVersion != null && rowVersion.Length > 0)
         {
   DbContext.Entry(alerta).Property(a => a.RowVersion).OriginalValue = rowVersion;
          }

            var comentario = nuevoEstado == EstadoAlerta.Resuelta 
  ? "Alerta resuelta desde el panel del motor" 
     : "Alerta descartada desde el panel del motor";

     // Actualizar alerta
    alerta.Estado = nuevoEstado;
    if (!string.IsNullOrWhiteSpace(comentario))
   {
       alerta.Notas = comentario;
 }
     alerta.ActualizadoEn = DateTime.UtcNow;

     // Si se marca como resuelta, guardar fecha
    if (nuevoEstado == EstadoAlerta.Resuelta)
 {
     alerta.ResueltaEn = DateTime.UtcNow;
            }

  try
    {
    await DbContext.SaveChangesAsync();

       // Actualizar en la lista local
    var alertaDto = _alertas.FirstOrDefault(a => a.AlertaId == alertaId);
    if (alertaDto != null)
     {
         var index = _alertas.IndexOf(alertaDto);
          _alertas[index] = alertaDto with { Estado = (byte)nuevoEstado };
        }

        var mensaje = nuevoEstado == EstadoAlerta.Resuelta ? "Alerta resuelta" : "Alerta descartada";
      Logger.LogInformation("✅ {Mensaje}", mensaje);
  _successMessage = mensaje;
       
      StateHasChanged();
            }
         catch (DbUpdateConcurrencyException)
 {
   var errorMsg = "La alerta fue modificada por otro usuario. Por favor, recargue la página.";
          Logger.LogWarning("⚠️ {Error}", errorMsg);
    _error = errorMsg;
  }
        }
catch (Exception ex)
     {
  Logger.LogError(ex, "❌ Error en CambiarEstadoAlerta");
       _error = $"Error inesperado: {ex.Message}";
      }
    }

    private Color ObtenerColorSeveridad(byte severidad)
    {
        return severidad switch
    {
     1 => Color.Info,
          2 => Color.Warning,
            3 => Color.Error,
            _ => Color.Default
      };
    }

  private string ObtenerTextoSeveridad(byte severidad)
    {
      return severidad switch
        {
  1 => "Info",
       2 => "Alta",
3 => "Crítica",
  _ => "Desconocida"
  };
    }

    private Color ObtenerColorEstado(byte estado)
    {
  return estado switch
    {
            1 => Color.Warning,
 2 => Color.Success,
            3 => Color.Secondary,
       _ => Color.Default
   };
    }

    private string ObtenerTextoEstado(byte estado)
    {
  return estado switch
   {
1 => "Abierta",
            2 => "Resuelta",
            3 => "Descartada",
   _ => "Desconocido"
      };
    }

    private class ProgramaInfo
    {
 public int Id { get; set; }
        public string Nombre { get; set; } = "";
    }
}
