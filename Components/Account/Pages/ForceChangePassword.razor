@page "/Account/ForceChangePassword"
@layout AuthLayout
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@using Sistema_Experto_ONG_Juventud_Sin_Limites.Domain.Security
@using Microsoft.JSInterop

@inject UserManager<Usuario> UserManager
@inject SignInManager<Usuario> SignInManager
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<ForceChangePassword> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Cambio de Contraseña Obligatorio</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
 <div class="col-md-6">
  <div class="card shadow">
       <div class="card-header bg-warning text-dark">
    <h3 class="mb-0">
  <i class="bi bi-shield-exclamation"></i> Cambio de Contraseña Obligatorio
          </h3>
  </div>
 <div class="card-body">
        @if (!string.IsNullOrEmpty(errorMessage))
    {
   <div class="alert alert-danger" role="alert">
   @errorMessage
      </div>
     }

 @if (!string.IsNullOrEmpty(successMessage))
   {
<div class="alert alert-success" role="alert">
 @successMessage
     </div>
     }

     <div class="alert alert-info">
 <p class="mb-0">
   <strong>Su cuenta requiere un cambio de contraseña.</strong><br />
    Por favor, ingrese su contraseña temporal actual y elija una nueva contraseña segura.
</p>
   </div>

  <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="changePassword">
  <DataAnnotationsValidator />
  <ValidationSummary class="text-danger" />

  <div class="mb-3">
      <label for="currentPassword" class="form-label">Contraseña Actual (Temporal)</label>
     <InputText type="password" id="currentPassword" @bind-Value="Input.CurrentPassword" 
class="form-control" autocomplete="current-password" />
    <ValidationMessage For="() => Input.CurrentPassword" class="text-danger" />
 </div>

     <div class="mb-3">
     <label for="newPassword" class="form-label">Nueva Contraseña</label>
         <InputText type="password" id="newPassword" @bind-Value="Input.NewPassword" 
    class="form-control" autocomplete="new-password" />
       <ValidationMessage For="() => Input.NewPassword" class="text-danger" />
       <small class="form-text text-muted">
    Mínimo 12 caracteres, debe incluir mayúsculas, minúsculas, números y caracteres especiales.
 </small>
      </div>

 <div class="mb-3">
      <label for="confirmPassword" class="form-label">Confirmar Nueva Contraseña</label>
  <InputText type="password" id="confirmPassword" @bind-Value="Input.ConfirmPassword" 
  class="form-control" autocomplete="new-password" />
   <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
     </div>

      <div class="d-grid">
            <button type="submit" class="btn btn-warning btn-lg" disabled="@isProcessing">
     @if (isProcessing)
      {
  <span class="spinner-border spinner-border-sm me-2"></span>
  }
  Cambiar Contraseña
  </button>
  </div>
    </EditForm>
   </div>
    </div>
        </div>
  </div>
</div>

@code {
    private string? errorMessage;
    private string? successMessage;
    private bool isProcessing;
    private Usuario? currentUser;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        // Obtener el estado de autenticación
   var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
  var user = authState.User;

     // Verificar que el usuario esté autenticado
        if (user?.Identity?.IsAuthenticated != true)
        {
       Logger.LogWarning("Usuario no autenticado intentando acceder a ForceChangePassword");
   NavigationManager.NavigateTo("/Account/Login", forceLoad: true);
 return;
        }

        // Cargar el usuario desde la base de datos
        currentUser = await UserManager.GetUserAsync(user);
        if (currentUser == null)
 {
      Logger.LogWarning("No se pudo cargar el usuario desde la base de datos");
         NavigationManager.NavigateTo("/Account/Login", forceLoad: true);
  return;
  }

        Logger.LogInformation("Usuario {Email} accedió a ForceChangePassword", currentUser.Email);
    }

    private async Task OnValidSubmitAsync()
    {
      errorMessage = null;
  successMessage = null;
   isProcessing = true;

     try
 {
    // Recargar el usuario actual
 if (currentUser == null)
    {
 var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                currentUser = await UserManager.GetUserAsync(authState.User);
            }

         if (currentUser == null)
        {
         errorMessage = "No se pudo cargar el usuario.";
       return;
      }

      // Verificar contraseña actual
      var checkPassword = await UserManager.CheckPasswordAsync(currentUser, Input.CurrentPassword);
    if (!checkPassword)
          {
       errorMessage = "La contraseña actual es incorrecta.";
   return;
   }

         // Cambiar contraseña
   var changePasswordResult = await UserManager.ChangePasswordAsync(currentUser, Input.CurrentPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
   {
          errorMessage = string.Join("; ", changePasswordResult.Errors.Select(e => e.Description));
    return;
   }

   // Actualizar flag y auditoría
   currentUser.MustChangePassword = false;
     currentUser.ActualizadoEn = DateTime.UtcNow;
 currentUser.ActualizadoPorUsuarioId = currentUser.Id;

 var updateResult = await UserManager.UpdateAsync(currentUser);
          if (!updateResult.Succeeded)
            {
 errorMessage = "Error al actualizar el usuario: " + string.Join("; ", updateResult.Errors.Select(e => e.Description));
 return;
     }

 // Refrescar sesión
  await SignInManager.RefreshSignInAsync(currentUser);

 Logger.LogInformation("Usuario {Email} cambió su contraseña exitosamente", currentUser.Email);

    successMessage = "✅ Contraseña cambiada exitosamente. Redirigiendo al inicio...";
  StateHasChanged();

  // Esperar un momento para que el usuario vea el mensaje
  await Task.Delay(1500);

        // Forzar redirección usando JavaScript para asegurar que funcione
      await JSRuntime.InvokeVoidAsync("window.location.href", "/");
   }
    catch (Exception ex)
    {
    Logger.LogError(ex, "Error al cambiar contraseña");
      errorMessage = "Ocurrió un error inesperado. Por favor, intente nuevamente.";
    }
        finally
    {
    isProcessing = false;
        }
    }

private sealed class InputModel
    {
     [Required(ErrorMessage = "La contraseña actual es requerida")]
[DataType(DataType.Password)]
        [Display(Name = "Contraseña Actual")]
 public string CurrentPassword { get; set; } = "";

        [Required(ErrorMessage = "La nueva contraseña es requerida")]
  [StringLength(100, ErrorMessage = "La contraseña debe tener al menos {2} y máximo {1} caracteres.", MinimumLength = 12)]
 [DataType(DataType.Password)]
        [Display(Name = "Nueva Contraseña")]
      public string NewPassword { get; set; } = "";

      [DataType(DataType.Password)]
  [Display(Name = "Confirmar Nueva Contraseña")]
    [Compare("NewPassword", ErrorMessage = "La nueva contraseña y la confirmación no coinciden.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
