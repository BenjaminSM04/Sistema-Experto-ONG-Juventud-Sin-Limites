@page "/Account/Login"
@layout AuthLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Sistema_Experto_ONG_Juventud_Sin_Limites.Data
@using Sistema_Experto_ONG_Juventud_Sin_Limites.Domain.Security

@inject SignInManager<Usuario> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Iniciar Sesión - ONG Juventud Sin Límites</PageTitle>

<h1>Iniciar Sesión</h1>
<div class="row">
    <div class="col-md-12">
        <section>
            <StatusMessage Message="@errorMessage" />
            <!-- Form HTML tradicional que hace POST real al endpoint -->
            <form action="/Account/PerformLogin" method="post">
                <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />

                <h2>Accede al sistema con tu cuenta</h2>
                <hr />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="text-danger" role="alert">@errorMessage</div>
                }

                <div class="form-floating mb-3">
                    <input name="email" type="email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" required />
                    <label for="email" class="form-label">Email</label>
                </div>
                <div class="form-floating mb-3">
                    <input name="password" type="password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" required />
                    <label for="password" class="form-label">Contraseña</label>
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <input name="rememberMe" type="checkbox" value="true" class="darker-border-checkbox form-check-input" />
                        Recordarme
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Iniciar Sesión</button>
                </div>
                <div class="mt-3 text-center">
                    <p>
                        <a href="Account/ForgotPassword">¿Olvidaste tu contraseña?</a>
                    </p>
                </div>
            </form>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Mostrar mensaje de error si viene en query parameter
        if (!string.IsNullOrEmpty(Message))
        {
            errorMessage = Message;
        }

        // Limpiar cookies de autenticación externa solo si es una solicitud GET y HttpContext está disponible
        await ClearExternalAuthenticationAsync();
    }

    private async Task ClearExternalAuthenticationAsync()
    {
        try
        {
            // Verificar que HttpContext esté disponible y que sea una solicitud GET
            if (HttpContext?.Request != null && HttpMethods.IsGet(HttpContext.Request.Method))
            {
                // Clear the existing external cookie to ensure a clean login process
                await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            }
        }
        catch (Exception ex)
        {
            // Loggear el error pero no interrumpir el flujo de la aplicación
            Logger.LogWarning(ex, "No se pudo limpiar la autenticación externa. Esto no afecta el funcionamiento del login.");
        }
    }
}
